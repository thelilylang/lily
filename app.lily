// import "@sys";
// import "@builtin";
// 
// macro write($s expr) = {
// 	@sys.write(1, {{s}}, @len({{s}}))	
// };

type Person record =
	name Str;
	age Uint8;
end

type MyType record =
	color Color;
end

type Color enum =
	Hex:Uint8;
	Rgb:(Uint8, Uint8, Uint8);
	R;
end

type MyValue[T] record =
	value T;
end

// type Letter enum =
// 	A;
// 	B;
// 	C;
// end

// fun add(x) =
// 	if true do
// 		return x;
// 	elif x do
// 		return x;
// 	else
// 		return false;
// 	end
// end

// fun `==`(x Int32, y Int64) Bool = return x cast Int64 == y; end

// fun add(x) = return x; end

fun add[T](x T) T = x end
fun add2[T](x T) T = add::[T](x) end
fun add3[T](x T) T = add2::[T](x) end

// error Invalid;

// fun get_err(n Int32) =
// 	if n == 0 do
// 		raise Invalid;
// 	end
// 
// 	return n;
// end

fun main =
	val x := global.add3::[Int32](34);
	val d := 340;
	val s := "Hello";

	if d < 500 do
		return;
	end

	// match d do
	// 	0 => ();
	// 	_ => ();
	// end
	// val y := global.add3::[Int64](34);
	// val z := global.add3::[Int64](y);
	// val d := MyValue { value := 40 };
	// val e := MyValue { value := "Hello" };
	// val a Int32 := 430;
	// val b Int32 := 5000;

	// try do
	// 	get_err(404);
	// catch do
	// end
	return;
end
